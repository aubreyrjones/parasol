%import common.WS
%ignore WS

%import common.LETTER
%import common.DIGIT
%import common.FLOAT
%import common.INT


// Literals

layout_index : INT

// Names and name-like things

PIDENT : ("_"|"?"|LETTER)+ ("_"|"?"|LETTER|DIGIT)*

namedef : PIDENT
nameref : PIDENT

typeref : nameref ["@" array_spec]
!array_spec : INT | "*"



// Module items

module : global_item*

?global_item : pipeline
             | struct_def

pipeline: namedef "{" pipeline_item* "}"
struct_def: "struct" namedef "{" var_decl* "}"

?pipeline_item : function_def
               | any_var_decl
               | assign_expr
//              | include_decl

function_def : "def" namedef [param_list] "=>" function_body

param_list : _rec_param_list
_rec_param_list : var_decl | (_rec_param_list "," var_decl)

function_body : expr


?any_var_decl : var_decl | staged_var_decl
var_decl : namedef ":" [typeref] [layout_index]
staged_var_decl : nameref "[" var_decl "]"


// Expressions

?expr : var_ref 
      | any_var_decl
      | binary_op
      | pliteral

var_ref : nameref
        | nameref "[" nameref "]"


?binary_op : assign_expr
           | arith_expr
           | swizzle_expr
           | compare_expr

assign_expr : (var_ref | any_var_decl) "=" expr

?arith_expr : add_expr
            | sub_expr
            | mul_expr
            | div_expr

add_expr : expr "+" expr
sub_expr : expr "-" expr
mul_expr : expr "*" expr
div_expr : expr "/" expr
swizzle_expr : expr "." expr

?compare_expr : eq_expr
              | l_and_expr
              | b_and_expr
              | l_or_expr
              | b_or_expr

eq_expr : expr "==" expr
l_and_expr : expr "&&" expr
b_and_expr : expr "&" expr
l_or_expr : expr "||" expr
b_or_expr : expr "|" expr

function_call : nameref "(" argument_list ")"
argument_list : _rec_argument_list
_rec_argument_list : expr | (_rec_argument_list "," expr)

pliteral : INT | FLOAT